name: Deploy Similarity Service to Azure Container Apps

on:
  push:
    paths:
      - 'similarity-service/**'
      - '.github/workflows/similarity-service-aca.yml'
    branches:
      - main
  workflow_dispatch:

env:
  ACA_APP_NAME: similarity-service
  ACA_ENV_NAME: ${{ secrets.AZURE_CONTAINERAPPS_ENV }}
  AZURE_RG: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_REGION: ${{ secrets.AZURE_REGION }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: similarity-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set variables
        id: vars
        run: |
          echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "ACR_LOGIN=${{ env.ACR_NAME }}.azurecr.io" >> $GITHUB_OUTPUT

      - name: Ensure resource group
        run: |
          az group show -n "$AZURE_RG" || az group create -n "$AZURE_RG" -l "$AZURE_REGION"

      - name: Ensure ACR
        run: |
          az acr show -n "$ACR_NAME" -g "$AZURE_RG" || az acr create -n "$ACR_NAME" -g "$AZURE_RG" --sku Basic

      - name: Ensure Container Apps extension
        run: |
          az extension add -n containerapp --yes
          az provider register --namespace Microsoft.App

      - name: Ensure Container Apps Environment
        run: |
          az containerapp env show -n "$ACA_ENV_NAME" -g "$AZURE_RG" || az containerapp env create -n "$ACA_ENV_NAME" -g "$AZURE_RG" -l "$AZURE_REGION"

      - name: Build and push image to ACR (ACR Build)
        run: |
          az acr build -r "$ACR_NAME" -t "$IMAGE_NAME:${{ steps.vars.outputs.TAG }}" -f similarity-service/Dockerfile similarity-service

      - name: Get ACR credentials
        id: acr
        run: |
          echo "USER=$(az acr credential show -n $ACR_NAME --query username -o tsv)" >> $GITHUB_OUTPUT
          echo "PASS=$(az acr credential show -n $ACR_NAME --query passwords[0].value -o tsv)" >> $GITHUB_OUTPUT

      - name: Create or update Container App
        env:
          TAG: ${{ steps.vars.outputs.TAG }}
          ACR_LOGIN: ${{ steps.vars.outputs.ACR_LOGIN }}
        run: |
          set -e
          IMAGE="$ACR_LOGIN/$IMAGE_NAME:$TAG"
          # Try show; if not exists, create
          if az containerapp show -n "$ACA_APP_NAME" -g "$AZURE_RG" >/dev/null 2>&1; then
            az containerapp update -n "$ACA_APP_NAME" -g "$AZURE_RG" \
              --image "$IMAGE" \
              --set-env-vars SIMILARITY_API_KEY=${{ secrets.SIMILARITY_API_KEY }}
          else
            az containerapp create -n "$ACA_APP_NAME" -g "$AZURE_RG" --environment "$ACA_ENV_NAME" \
              --image "$IMAGE" \
              --ingress external --target-port 3001 \
              --registry-server "$ACR_LOGIN" --registry-username "${{ steps.acr.outputs.USER }}" --registry-password "${{ steps.acr.outputs.PASS }}" \
              --env-vars SIMILARITY_API_KEY=${{ secrets.SIMILARITY_API_KEY }}
          fi

      - name: Output FQDN
        run: |
          az containerapp show -n "$ACA_APP_NAME" -g "$AZURE_RG" --query properties.configuration.ingress.fqdn -o tsv


